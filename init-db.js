const mongoose = require('mongoose');
const Team = require('./models/team');
const Config = require('./models/config');

// Sample data
const sampleTeams = [
    { name: 'ƒê·ªôi √Ånh D∆∞∆°ng', description: 'Nh√≥m nh·∫£y hi·ªán ƒë·∫°i' },
    { name: 'ƒê·ªôi Sao BƒÉng', description: 'Nh√≥m h√°t pop ballad' },
    { name: 'ƒê·ªôi R·ªìng V√†ng', description: 'Nh√≥m m√∫a truy·ªÅn th·ªëng' },
    { name: 'ƒê·ªôi Phoenix', description: 'Nh√≥m bi·ªÉu di·ªÖn t·ªïng h·ª£p' }
];

const defaultConfig = [
    { key: 'voteDuration', value: 300 }, // 5 minutes
    { key: 'systemName', value: 'B√¨nh Ch·ªçn' },
    { key: 'allowMultipleVotes', value: true }
];

async function initDatabase() {
    try {
        const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/voting_system';
        
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });

        console.log('üîó Connected to MongoDB for initialization');

        // Check if teams already exist
        const existingTeams = await Team.countDocuments();
        if (existingTeams === 0) {
            await Team.insertMany(sampleTeams);
            console.log('‚úÖ Sample teams inserted');
        } else {
            console.log('‚ÑπÔ∏è  Teams already exist, skipping sample data');
        }

        // Initialize default config
        for (const configItem of defaultConfig) {
            const existing = await Config.findOne({ key: configItem.key });
            if (!existing) {
                await Config.create(configItem);
                console.log(`‚úÖ Config ${configItem.key} initialized`);
            }
        }

        console.log('üéâ Database initialization completed');
        
    } catch (error) {
        console.error('‚ùå Database initialization error:', error);
    } finally {
        await mongoose.disconnect();
        console.log('üîå Disconnected from MongoDB');
    }
}

// Run if called directly
if (require.main === module) {
    initDatabase();
}

module.exports = { initDatabase };
